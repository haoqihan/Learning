{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs \u7684\u57fa\u672c\u4f7f\u7528 \u4e0b\u8f7d pip install mkdocs \u521b\u5efa\u9879\u76ee mkdocs new \u9879\u76ee\u540d cd \u9879\u76ee\u540d \u542f\u52a8\u9879\u76ee:mkdocs serve \u66f4\u6362\u4e3b\u9898 \u8fdb\u5165mkdocs.yml\u91cc\u6dfb\u52a0 theme: readthedocs\u53ef\u4ee5\u4fee\u6539\u4e3b\u9898 \u653e\u5165github\u4e0a \u8fdb\u5165settings\u91cc \u5230pages\u4e0bsource\u9009\u62e9gh-pages branch \u6ce8\u91ca:\u8fd9\u91cc\u662f\u5efa\u7acb\u5728\u4f60\u628a\u9879\u76ee\u653e\u5165github\u91cc\u4e86,\u4f60\u8fd8\u9700\u8981\u5efa\u7acb\u4e00\u4e2agh-pages\u5206\u652f,\u4e13\u95e8\u5b58\u653emkdocs\u751f\u6210\u7684html\u4ee3\u7801 \u5feb\u901f\u63d0\u4ea4github mkdocs gh-deploy :\u8fd9\u662f\u751f\u6210\u4e00\u4e2asite\u6587\u4ef6\u5e76\u628a\u5b83\u63a8\u9001\u5230\u4ed3\u5e93 mkdocs\u7684\u57fa\u672c\u4fe1\u606f site_name\uff1a\u7ad9\u70b9\u7684\u540d\u79f0 \u6bd4\u5982\u6211\u4eec\u7684\u662f\u8fd9\u4e48\u8bbe\u7f6e\u7684\uff1a pages: \u5bfc\u822a\u9875\u9762 theme: \u7ad9\u70b9\u4e3b\u9898 docs_dir: Markdown\u6587\u6863\u76ee\u5f55 site_dir: \u751f\u6210\u7684\u9759\u6001\u7f51\u9875\u76ee\u5f55 dev_addr: \u672c\u5730\u8c03\u8bd5\u7684\u76d1\u542c\u5730\u5740\u548c\u7aef\u53e3 markdown_extensions: \u4e00\u4e9b\u6269\u5c55\u529f\u80fd import requests res = requests.get('http://www.baidu.com') print(res.text)","title":"mkdocs \u7684\u57fa\u672c\u4f7f\u7528"},{"location":"#mkdocs","text":"\u4e0b\u8f7d pip install mkdocs \u521b\u5efa\u9879\u76ee mkdocs new \u9879\u76ee\u540d cd \u9879\u76ee\u540d \u542f\u52a8\u9879\u76ee:mkdocs serve","title":"mkdocs \u7684\u57fa\u672c\u4f7f\u7528"},{"location":"#_1","text":"\u8fdb\u5165mkdocs.yml\u91cc\u6dfb\u52a0 theme: readthedocs\u53ef\u4ee5\u4fee\u6539\u4e3b\u9898","title":"\u66f4\u6362\u4e3b\u9898"},{"location":"#github","text":"\u8fdb\u5165settings\u91cc \u5230pages\u4e0bsource\u9009\u62e9gh-pages branch \u6ce8\u91ca:\u8fd9\u91cc\u662f\u5efa\u7acb\u5728\u4f60\u628a\u9879\u76ee\u653e\u5165github\u91cc\u4e86,\u4f60\u8fd8\u9700\u8981\u5efa\u7acb\u4e00\u4e2agh-pages\u5206\u652f,\u4e13\u95e8\u5b58\u653emkdocs\u751f\u6210\u7684html\u4ee3\u7801","title":"\u653e\u5165github\u4e0a"},{"location":"#github_1","text":"mkdocs gh-deploy :\u8fd9\u662f\u751f\u6210\u4e00\u4e2asite\u6587\u4ef6\u5e76\u628a\u5b83\u63a8\u9001\u5230\u4ed3\u5e93","title":"\u5feb\u901f\u63d0\u4ea4github"},{"location":"#mkdocs_1","text":"site_name\uff1a\u7ad9\u70b9\u7684\u540d\u79f0 \u6bd4\u5982\u6211\u4eec\u7684\u662f\u8fd9\u4e48\u8bbe\u7f6e\u7684\uff1a pages: \u5bfc\u822a\u9875\u9762 theme: \u7ad9\u70b9\u4e3b\u9898 docs_dir: Markdown\u6587\u6863\u76ee\u5f55 site_dir: \u751f\u6210\u7684\u9759\u6001\u7f51\u9875\u76ee\u5f55 dev_addr: \u672c\u5730\u8c03\u8bd5\u7684\u76d1\u542c\u5730\u5740\u548c\u7aef\u53e3 markdown_extensions: \u4e00\u4e9b\u6269\u5c55\u529f\u80fd import requests res = requests.get('http://www.baidu.com') print(res.text)","title":"mkdocs\u7684\u57fa\u672c\u4fe1\u606f"},{"location":"1.python\u7b14\u8bb0/1.python\u57fa\u7840/1.python\u7684\u57fa\u672c\u4fe1\u606f/","text":"python\u57fa\u672c\u4fe1\u606f","title":"python\u57fa\u672c\u4fe1\u606f"},{"location":"1.python\u7b14\u8bb0/1.python\u57fa\u7840/1.python\u7684\u57fa\u672c\u4fe1\u606f/#python","text":"","title":"python\u57fa\u672c\u4fe1\u606f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/","text":"\u4ec0\u4e48\u662f\u7b97\u6cd5? \u7b97\u6cd5(Algorithm): \u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7a0b,\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6 :\u7528\u6765\u8bc4\u4f30\u7b97\u6cd5\u8fd0\u884c\u6548\u7387\u7684\u4e00\u4e2a\u4e1c\u897f \u4e00\u822c\u6765\u8bf4,\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u7684\u7b97\u6cd5\u6bd4\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u7684\u7b97\u6cd5\u6162 \u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6(\u6309\u7167\u6548\u7387\u6392\u5e8f O(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n2logn)<O(n3) \u4e0d\u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(n!) O(2n) O(nn).... \u5982\u4f55\u4e00\u773c\u5224\u65ad\u65f6\u95f4\u590d\u6742\u5ea6 \u5faa\u73af\u51cf\u534a\u7684\u8fc7\u7a0bO(logn) \u51e0\u6b21\u5faa\u73af\u5c31\u662fn\u7684\u51e0\u6b21\u65b9\u7684\u590d\u6742\u5ea6 print('hello World') # O(1) for i in range(n): # O(n) print('hello world') for i in range(n): #O(n\u00b2) for j in range(n): print('hello world') for i in range(n): #O(n\u00b3) for j in range(n): for k in range(n): print('hello world') \u7a7a\u95f4\u590d\u6742\u5ea6 \u7a7a\u95f4\u590d\u6742\u5ea6: \u7528\u6765\u8bc4\u4f30\u7b97\u6cd5\u5185\u5b58\u5360\u7528\u5927\u5c0f\u7684\u4e00\u4e2a\u5f0f\u5b50 \u4e8c\u5206\u67e5\u627e \u4ee3\u7801: # \u666e\u901a\u7684\u67e5\u627e\u65b9\u5f0f def linear_search(data_set,value): for i in range(len(data_set)): # \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n) if data_set[i] == value: return i return # \u4e8c\u5206\u67e5\u627e # \u5faa\u73af\u7248\u672c def bin_search(data_set,value): low = 0 high = len(data_set) - 1 while low <= high: mid = (low + high) // 2 if data_set[mid] == value: # \u65f6\u95f4\u590d\u6742\u5ea6O(logn) return mid elif data_set[mid] > value: high = mid-1 else: low = mid + 1 # \u9012\u5f52\u7248\u672c def bin_search_rec(data_set,value,low,high): if low <= high: mid = (low + high) // 2 if data_set[mid] == value: return mid elif data_set[mid] > value: return bin_search_rec(data_set,value,low,mid-1) else: return bin_search_rec(data_set,value,mid+1,high) else: return \u5192\u6ce1\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f\u601d\u8def: \u9996\u5148,\u5217\u8868\u4e24\u4e2a\u76f8\u90bb\u7684\u6570,\u5982\u679c\u524d\u8fb9\u7684\u6bd4\u540e\u8fb9\u7684\u5927,\u90a3\u4e48\u4ea4\u6362\u8fd9\u4e24\u4e2a\u6570,\u5982\u679c\u4e0d\u5927,\u90a3\u5c31\u4e0d\u9700\u8981\u4ea4\u6362 \u4ee3\u7801\u5173\u952e\u70b9: 1.\u8d9f 2.\u65e0\u5e8f\u533a ```python # \u5192\u6ce1\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6:O(n\u00b2) def bubble_sort(li): for i in range(len(li)): for j in range(i+1,len(li)): if li[i] > li[j]: li[i], li[j] = li[j], li[i] # \u5192\u6ce1\u7b97\u6cd5\u4f18\u5316 # \u5982\u679c\u5192\u6ce1\u6392\u5e8f\u4e2d\u6267\u884c\u4e00\u8d9f\u800c\u6ca1\u6709\u4ea4\u6362\uff0c\u5219\u5217\u8868\u5df2\u7ecf\u662f\u6709\u5e8f\u72b6\u6001\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed3\u675f\u7b97\u6cd5 def bubble_sort(li): for i in range(len(li)): exchange = False for j in range(i+1,len(li)): if li[i] > li[j]: li[i], li[j] = li[j], li[i] exchange = True if not exchange: return ``` \u9009\u62e9\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\u601d\u8def: \u4e00\u8d9f\u904d\u5386\u8bb0\u5f55\u6700\u5c0f\u7684\u6570\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e \u518d\u4e00\u8d9f\u904d\u5386\u8bb0\u5f55\u5269\u4f59\u5217\u8868\u4e2d\u6700\u5c0f\u7684\u6570\uff0c\u7ee7\u7eed\u653e\u7f6e \u4ee3\u7801\u5173\u952e\u70b9: 1.\u65e0\u5e8f\u533a 2.\u6700\u5c0f\u6570\u7684\u4f4d\u7f6e # \u9009\u62e9\u6392\u5e8f\u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6:O(n\u00b2) def select_sort(li): for i in range(len(li)): min_loc = i for j in range(i+1,len(li)): if li[j] < li[min_loc]: min_loc = j if min_loc != i: li[i],li[min_loc] = li[min_loc],li[i] \u63d2\u5165\u6392\u5e8f \u63d2\u5165\u6392\u5e8f\u601d\u8def \u200b \u5217\u8868\u88ab\u5206\u4e3a\u6709\u5e8f\u533a\u548c\u65e0\u5e8f\u533a\u4e24\u90e8\u5206,\u6700\u521d\u6709\u5e8f\u533a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20 \u200b \u6bcf\u6b21\u4ece\u65e0\u5e8f\u533a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20,\u63d2\u5165\u5230\u6709\u5e8f\u533a\u7684\u4f4d\u7f6e,\u76f4\u5230\u65e0\u5e8f\u533a\u53d8\u7a7a # \u63d2\u5165\u6392\u5e8f\u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6O(n\u00b2) def insert_sort(li): for i in range(1,len(li)): tmp = li[i] j = i - 1 while j>=0 and tmp < li[j]: li[j+1] = li[j] j -= 1 li[j+1] = tmp \u5feb\u901f\u6392\u5e8f \u5feb\u901f\u6392\u5e8f\u601d\u8def 1.\u53d6\u4e00\u4e2a\u5143\u7d20p(\u7b2c\u4e00\u4e2a\u5143\u7d20),\u4f7f\u5143\u7d20p\u5f52\u4e3a 2.\u5217\u8868\u88abp\u5206\u4e3a\u4e24\u90e8\u5206,\u5de6\u8fb9\u6bd4p\u5c0f,\u53f3\u8fb9\u6bd4p\u5927 3..\u9012\u5f52\u5b8c\u6210\u6392\u5e8f # \u5feb\u901f\u6392\u5e8f \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn) def quick_sort(data,left,right): if left < right: mid = partition(data,left,right) quick_sort(data,left,mid-1) quick_sort(data,mid+1,right) def partition(data,left,right): tmp = data[left] while left < right: while left < right and data[right] >= tmp: right -= 1 data[left] = data[right] while left < right and data[left] <= tmp: left += 1 data[right] = data[left] data[left] = tmp return left \u5806\u6392\u5e8f \u6811\u4e0e\u4e8c\u53c9\u6811\u7684\u7b80\u4ecb \u6811\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u6bd4\u5982\uff1a\u76ee\u5f55\u7ed3\u6784 \u6811\u662f\u4e00\u79cd\u53ef\u4ee5\u9012\u5f52\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784 \u6811\u662f\u7531n\u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u96c6\u5408\uff1a \u5982\u679cn=0\uff0c\u90a3\u8fd9\u662f\u4e00\u68f5\u7a7a\u6811\uff1b \u5982\u679cn>0\uff0c\u90a3\u5b58\u57281\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u8282\u70b9\uff0c\u5176\u4ed6\u8282\u70b9\u53ef\u4ee5\u5206\u4e3am\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811\u3002 \u4e00\u4e9b\u6982\u5ff5: \u6839\u8282\u70b9\u3001 \u53f6\u5b50\u8282\u70b9\u6811\u7684\u6df1\u5ea6\uff08\u9ad8\u5ea6\uff09 \u6811\u7684\u5ea6\u5b69\u5b50\u8282\u70b9/\u7236\u8282\u70b9 \u5b50\u6811 \u4e24\u79cd\u7279\u6b8a\u4e8c\u53c9\u6811 \u6ee1\u4e8c\u53c9:\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5982\u679c\u6bcf\u4e00\u4e2a\u5c42\u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5219\u8fd9\u4e2a\u4e8c\u53c9\u6811\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u53f6\u8282\u70b9\u53ea\u80fd\u51fa\u73b0\u5728\u6700\u4e0b\u5c42\u548c\u6b21\u4e0b\u5c42\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u7684\u4e8c\u53c9\u6811\u3002 \u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f: \u94fe\u5f0f\u5b58\u50a8\u65b9\u5f0f \u987a\u5e8f\u5b58\u50a8\u65b9\u5f0f(\u5217\u8868) \u7236\u8282\u70b9\u548c\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u4e0b\u6807\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f 2i+1 i:\u4ee3\u8868\u4e0b\u6807 \u7236\u8282\u70b9\u548c\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u4e0b\u6807\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f 2i+2 \u5806\u6392\u5e8f \u5806: \u5927\u6839\u5806\uff1a\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u8db3\u4efb\u4e00\u8282\u70b9\u90fd\u6bd4\u5176\u5b69\u5b50\u8282\u70b9\u5927 \u5c0f\u6839\u5806\uff1a\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u8db3\u4efb\u4e00\u8282\u70b9\u90fd\u6bd4\u5176\u5b69\u5b50\u8282\u70b9\u5c0f \u5806\u7684\u5411\u4e0b\u8c03\u6574\u6027\u8d28: \u5047\u8bbe:\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5806\uff0c\u4f46\u81ea\u8eab\u4e0d\u662f\u5806 \u5f53\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5806\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u5411\u4e0b\u7684\u8c03\u6574\u6765\u5c06\u5176\u53d8\u6362\u6210\u4e00\u4e2a\u5806 \u5806\u6392\u5e8f\u8fc7\u7a0b: \u5efa\u7acb\u5806 \u5f97\u5230\u5806\u9876\u5143\u7d20\uff0c\u4e3a\u6700\u5927\u5143\u7d20 \u53bb\u6389\u5806\u9876\uff0c\u5c06\u5806\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u653e\u5230\u5806\u9876\uff0c\u6b64\u65f6\u53ef\u901a\u8fc7\u4e00\u6b21\u8c03\u6574\u91cd\u65b0\u4f7f\u5806\u6709\u5e8f\u3002 \u5806\u9876\u5143\u7d20\u4e3a\u7b2c\u4e8c\u5927\u5143\u7d20\u3002 \u91cd\u590d\u6b65\u9aa43\uff0c\u76f4\u5230\u5806\u53d8\u7a7a\u3002 # \u5806\u6392\u5e8f\u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn) def sift(data,low,high): i = low j = 2 * i +1 tmp = data[i] while j <= high: if j < high and data[j] < data[j+1]: j += 1 if tmp < data[j]: data[i] = data[j] i = j j = 2*i+1 else: break data[i] = tmp def heap_sort(data): n = len(data) for i in range(n//2-1,-1,-1): sift(data,i,n-1) for i in range(n-1,-1,-1): data[0],data[i] = data[i],data[0] sift(data,0,i-1) \u5806\u6392\u5e8f--\u5185\u7f6e\u6a21\u5757 \u4f18\u5148\u961f\u5217\uff1a\u4e00\u4e9b\u5143\u7d20\u7684\u96c6\u5408\uff0cPOP\u64cd\u4f5c\u6bcf\u6b21\u6267\u884c\u90fd\u4f1a\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u5f39\u51fa\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\u7684\u5143\u7d20\u3002 \u5806\u2014\u2014\u4f18\u5148\u961f\u5217 Python\u5185\u7f6e\u6a21\u5757\u2014\u2014heapq heapify(x) heappush(heap, item) heappop(heap) \u5229\u7528heapq\u6a21\u5757\u5b9e\u73b0\u5806\u6392\u5e8f import heapq def heapsort(li): h = [] for value in li: heappush(h, value) return [heappop(h) for i in range(len(h))] \u5f52\u5e76\u6392\u5e8f \u5047\u8bbe\u73b0\u5728\u7684\u5217\u8868\u5206\u4e24\u6bb5\u6709\u5e8f\uff0c\u5c06\u5176\u5408\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u5217\u8868,\u8fd9\u79cd\u64cd\u4f5c\u79f0\u4e3a\u4e00\u6b21\u5f52\u5e76 # \u5f52\u5e76\u6392\u5e8f \u65f6\u95f4\u590d\u6742\u5ea6O(logn) \u7a7a\u95f4\u590d\u6742\u5ea6:O(n) def merge(li,low,mid,high): li_tmp = [] i = low j = mid + 1 while i <= mid and j <= high: if li[i] < li[j]: li_tmp.append(li[i]) i += 1 else: li_tmp.append(li[j]) j += 1 while i <= mid: li_tmp.append(li[i]) i += 1 while j <= high: li_tmp.append(li[j]) j += 1 for i in range(len(li_tmp)): li[i+low] = li_tmp[i] def merge_sort(li,low,high): if low < high: mid = (low + high) // 2 merge_sort(li,low,mid) merge_sort(li,mid+1,high) merge(li,low,mid,high) \u5f52\u5e76\u6392\u5e8f\u5b9e\u73b0\u601d\u8def: \u5206\u89e3\uff1a\u5c06\u5217\u8868\u8d8a\u5206\u8d8a\u5c0f\uff0c\u76f4\u81f3\u5206\u6210\u4e00\u4e2a\u5143\u7d20\u3002 \u7ec8\u6b62\u6761\u4ef6\uff1a\u4e00\u4e2a\u5143\u7d20\u662f\u6709\u5e8f\u7684\u3002 \u5408\u5e76\uff1a\u5c06\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\u5f52\u5e76\uff0c\u5217\u8868\u8d8a\u6765\u8d8a\u5927 \u603b\u7ed3: \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5c31\u8fd0\u884c\u65f6\u95f4\u800c\u8a00\uff1a\u5feb\u901f\u6392\u5e8f < \u5f52\u5e76\u6392\u5e8f < \u5806\u6392\u5e8f \u4e09\u79cd\u6392\u5e8f\u7b97\u6cd5\u7684\u7f3a\u70b9\uff1a \u5feb\u901f\u6392\u5e8f\uff1a\u6781\u7aef\u60c5\u51b5\u4e0b\u6392\u5e8f\u6548\u7387\u4f4e \u5f52\u5e76\u6392\u5e8f\uff1a\u9700\u8981\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500 \u5806\u6392\u5e8f\uff1a\u5728\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\u4e2d\u76f8\u5bf9\u8f83\u6162 \u5e0c\u5c14\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f\u601d\u8def: \u5e0c\u5c14\u6392\u5e8f\u662f\u4e00\u79cd\u5206\u7ec4\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5 \u9996\u5148\u53d6\u4e00\u4e2a\u6574\u6570d1=n/2\uff0c\u5c06\u5143\u7d20\u5206\u4e3ad1\u4e2a\u7ec4\uff0c\u6bcf\u7ec4\u76f8\u90bb\u91cf\u5143\u7d20\u4e4b\u95f4\u8ddd\u79bb\u4e3ad1\uff0c\u5728\u5404\u7ec4\u5185\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u53d6\u7b2c\u4e8c\u4e2a\u6574\u6570d2=d1/2\uff0c\u91cd\u590d\u4e0a\u8ff0\u5206\u7ec4\u6392\u5e8f\u8fc7\u7a0b\uff0c\u76f4\u5230di=1\uff0c\u5373\u6240\u6709\u5143\u7d20\u5728\u540c\u4e00\u7ec4\u5185\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3002 \u5e0c\u5c14\u6392\u5e8f\u6bcf\u8d9f\u5e76\u4e0d\u4f7f\u67d0\u4e9b\u5143\u7d20\u6709\u5e8f\uff0c\u800c\u662f\u4f7f\u6574\u4f53\u6570\u636e\u8d8a\u6765\u8d8a\u63a5\u8fd1\u6709\u5e8f\uff1b\u6700\u540e\u4e00\u8d9f\u6392\u5e8f\u4f7f\u5f97\u6240\u6709\u6570\u636e\u6709\u5e8f # \u5e0c\u5c14\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba8\u8bba\u6bd4\u8f83\u590d\u6742\uff0c\u5e76\u4e14\u548c\u9009\u53d6\u7684gap\u5e8f\u5217\u6709\u5173\u3002 def shell_sort(li): gap = len(li) // 2 while gap > 0: for i in range(gap,len(li)): tmp = li[i] j = i-gap while j >= 0 and tmp < li[j]: li[j + gap] = li[j] j -= gap li[j+gap] = tmp gap //= 2 \u8ba1\u6570\u6392\u5e8f \u73b0\u5728\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u5df2\u77e5\u5217\u8868\u4e2d\u7684\u6570\u8303\u56f4\u90fd\u57280\u5230100\u4e4b\u95f4\u3002\u8bbe\u8ba1\u7b97\u6cd5\u5728O(n)\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5c06\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 \u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u6765\u7edf\u8ba1\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570 def count_sort(li,max_num): count = [0 for i in range(max_num+1)] for num in li: count[num] += 1 i = 0 for num , m in enumerate(count): for j in range(m): li[i] = num i += 1 li = [1,2,3,4,5,8,6,3,2,1,4] count_sort(li,8) print(li) \u6876\u6392\u5e8f \u5728\u8ba1\u6570\u6392\u5e8f\u4e2d\uff0c\u5982\u679c\u5143\u7d20\u7684\u8303\u56f4\u6bd4\u8f83\u5927\uff08\u6bd4\u5982\u57281\u52301\u4ebf\u4e4b\u95f4\uff09\uff0c\u5982\u4f55\u6539\u9020\u7b97\u6cd5\uff1f \u6876\u6392\u5e8f(Bucket Sort)\uff1a\u9996\u5148\u5c06\u5143\u7d20\u5206\u5728\u4e0d\u540c\u7684\u6876\u4e2d\uff0c\u5728\u5bf9\u6bcf\u4e2a\u6876\u4e2d\u7684\u5143\u7d20\u6392\u5e8f\u3002 \u6876\u6392\u5e8f\u7684\u8868\u73b0\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u5206\u5e03\u3002\u4e5f\u5c31\u662f\u9700\u8981\u5bf9\u4e0d\u540c\u6570\u636e\u6392\u5e8f\u65f6\u91c7\u53d6\u4e0d\u540c\u7684\u5206\u6876\u7b56\u7565\u3002 \u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+k) \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n2k) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(nk) \u57fa\u6570\u6392\u5e8f \u591a\u5173\u952e\u5b57\u6392\u5e8f\uff1a\u52a0\u5165\u73b0\u5728\u6709\u4e00\u4e2a\u5458\u5de5\u8868\uff0c\u8981\u6c42\u6309\u7167\u85aa\u8d44\u6392\u5e8f\uff0c\u5e74\u9f84\u76f8\u540c\u7684\u5458\u5de5\u6309\u7167\u5e74\u9f84\u6392\u5e8f\u3002 \u5148\u6309\u7167\u5e74\u9f84\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u6309\u7167\u85aa\u8d44\u8fdb\u884c\u7a33\u5b9a\u7684\u6392\u5e8f\u3002 \u5bf932,13,94,52,17,54,93\u6392\u5e8f\uff0c\u662f\u5426\u53ef\u4ee5\u770b\u505a\u591a\u5173\u952e\u5b57\u6392\u5e8f\uff1f # \u57fa\u6570\u6392\u5e8f # \u65f6\u95f4\u590d\u6742\u5ea6 O(kn) # \u7a7a\u95f4\u590d\u6742\u5ea6:O(k+n) # k\u8868\u793a\u6570\u5b57\u4f4d\u6570 def list_to_bucket(li, i): buckets = [[] for _ in range(10)] for val in li: digit = val // (10 ** i) % 10 buckets[digit].append(val) return buckets def bucket_to_list(buckets): li = [] for bucket in buckets: for val in bucket: li.append(val) return li def radix_sort(li): max_val = max(li) i = 0 while 10 ** i <= max_val: li = bucket_to_list(list_to_bucket(li, i)) i += 1 return li","title":"\u57fa\u672c10\u5927\u7b97\u6cd5"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_1","text":"\u7b97\u6cd5(Algorithm): \u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7a0b,\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5","title":"\u4ec0\u4e48\u662f\u7b97\u6cd5?"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_2","text":"\u65f6\u95f4\u590d\u6742\u5ea6 :\u7528\u6765\u8bc4\u4f30\u7b97\u6cd5\u8fd0\u884c\u6548\u7387\u7684\u4e00\u4e2a\u4e1c\u897f \u4e00\u822c\u6765\u8bf4,\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u7684\u7b97\u6cd5\u6bd4\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u7684\u7b97\u6cd5\u6162 \u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6(\u6309\u7167\u6548\u7387\u6392\u5e8f O(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n2logn)<O(n3) \u4e0d\u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(n!) O(2n) O(nn).... \u5982\u4f55\u4e00\u773c\u5224\u65ad\u65f6\u95f4\u590d\u6742\u5ea6 \u5faa\u73af\u51cf\u534a\u7684\u8fc7\u7a0bO(logn) \u51e0\u6b21\u5faa\u73af\u5c31\u662fn\u7684\u51e0\u6b21\u65b9\u7684\u590d\u6742\u5ea6 print('hello World') # O(1) for i in range(n): # O(n) print('hello world') for i in range(n): #O(n\u00b2) for j in range(n): print('hello world') for i in range(n): #O(n\u00b3) for j in range(n): for k in range(n): print('hello world')","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_3","text":"\u7a7a\u95f4\u590d\u6742\u5ea6: \u7528\u6765\u8bc4\u4f30\u7b97\u6cd5\u5185\u5b58\u5360\u7528\u5927\u5c0f\u7684\u4e00\u4e2a\u5f0f\u5b50","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_4","text":"\u4ee3\u7801: # \u666e\u901a\u7684\u67e5\u627e\u65b9\u5f0f def linear_search(data_set,value): for i in range(len(data_set)): # \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n) if data_set[i] == value: return i return # \u4e8c\u5206\u67e5\u627e # \u5faa\u73af\u7248\u672c def bin_search(data_set,value): low = 0 high = len(data_set) - 1 while low <= high: mid = (low + high) // 2 if data_set[mid] == value: # \u65f6\u95f4\u590d\u6742\u5ea6O(logn) return mid elif data_set[mid] > value: high = mid-1 else: low = mid + 1 # \u9012\u5f52\u7248\u672c def bin_search_rec(data_set,value,low,high): if low <= high: mid = (low + high) // 2 if data_set[mid] == value: return mid elif data_set[mid] > value: return bin_search_rec(data_set,value,low,mid-1) else: return bin_search_rec(data_set,value,mid+1,high) else: return","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_5","text":"\u5192\u6ce1\u6392\u5e8f\u601d\u8def: \u9996\u5148,\u5217\u8868\u4e24\u4e2a\u76f8\u90bb\u7684\u6570,\u5982\u679c\u524d\u8fb9\u7684\u6bd4\u540e\u8fb9\u7684\u5927,\u90a3\u4e48\u4ea4\u6362\u8fd9\u4e24\u4e2a\u6570,\u5982\u679c\u4e0d\u5927,\u90a3\u5c31\u4e0d\u9700\u8981\u4ea4\u6362 \u4ee3\u7801\u5173\u952e\u70b9: 1.\u8d9f 2.\u65e0\u5e8f\u533a ```python # \u5192\u6ce1\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6:O(n\u00b2) def bubble_sort(li): for i in range(len(li)): for j in range(i+1,len(li)): if li[i] > li[j]: li[i], li[j] = li[j], li[i] # \u5192\u6ce1\u7b97\u6cd5\u4f18\u5316 # \u5982\u679c\u5192\u6ce1\u6392\u5e8f\u4e2d\u6267\u884c\u4e00\u8d9f\u800c\u6ca1\u6709\u4ea4\u6362\uff0c\u5219\u5217\u8868\u5df2\u7ecf\u662f\u6709\u5e8f\u72b6\u6001\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed3\u675f\u7b97\u6cd5 def bubble_sort(li): for i in range(len(li)): exchange = False for j in range(i+1,len(li)): if li[i] > li[j]: li[i], li[j] = li[j], li[i] exchange = True if not exchange: return ```","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_6","text":"\u9009\u62e9\u6392\u5e8f\u601d\u8def: \u4e00\u8d9f\u904d\u5386\u8bb0\u5f55\u6700\u5c0f\u7684\u6570\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e \u518d\u4e00\u8d9f\u904d\u5386\u8bb0\u5f55\u5269\u4f59\u5217\u8868\u4e2d\u6700\u5c0f\u7684\u6570\uff0c\u7ee7\u7eed\u653e\u7f6e \u4ee3\u7801\u5173\u952e\u70b9: 1.\u65e0\u5e8f\u533a 2.\u6700\u5c0f\u6570\u7684\u4f4d\u7f6e # \u9009\u62e9\u6392\u5e8f\u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6:O(n\u00b2) def select_sort(li): for i in range(len(li)): min_loc = i for j in range(i+1,len(li)): if li[j] < li[min_loc]: min_loc = j if min_loc != i: li[i],li[min_loc] = li[min_loc],li[i]","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_7","text":"\u63d2\u5165\u6392\u5e8f\u601d\u8def \u200b \u5217\u8868\u88ab\u5206\u4e3a\u6709\u5e8f\u533a\u548c\u65e0\u5e8f\u533a\u4e24\u90e8\u5206,\u6700\u521d\u6709\u5e8f\u533a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20 \u200b \u6bcf\u6b21\u4ece\u65e0\u5e8f\u533a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20,\u63d2\u5165\u5230\u6709\u5e8f\u533a\u7684\u4f4d\u7f6e,\u76f4\u5230\u65e0\u5e8f\u533a\u53d8\u7a7a # \u63d2\u5165\u6392\u5e8f\u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6O(n\u00b2) def insert_sort(li): for i in range(1,len(li)): tmp = li[i] j = i - 1 while j>=0 and tmp < li[j]: li[j+1] = li[j] j -= 1 li[j+1] = tmp","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_8","text":"\u5feb\u901f\u6392\u5e8f\u601d\u8def 1.\u53d6\u4e00\u4e2a\u5143\u7d20p(\u7b2c\u4e00\u4e2a\u5143\u7d20),\u4f7f\u5143\u7d20p\u5f52\u4e3a 2.\u5217\u8868\u88abp\u5206\u4e3a\u4e24\u90e8\u5206,\u5de6\u8fb9\u6bd4p\u5c0f,\u53f3\u8fb9\u6bd4p\u5927 3..\u9012\u5f52\u5b8c\u6210\u6392\u5e8f # \u5feb\u901f\u6392\u5e8f \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn) def quick_sort(data,left,right): if left < right: mid = partition(data,left,right) quick_sort(data,left,mid-1) quick_sort(data,mid+1,right) def partition(data,left,right): tmp = data[left] while left < right: while left < right and data[right] >= tmp: right -= 1 data[left] = data[right] while left < right and data[left] <= tmp: left += 1 data[right] = data[left] data[left] = tmp return left","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_9","text":"\u6811\u4e0e\u4e8c\u53c9\u6811\u7684\u7b80\u4ecb \u6811\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u6bd4\u5982\uff1a\u76ee\u5f55\u7ed3\u6784 \u6811\u662f\u4e00\u79cd\u53ef\u4ee5\u9012\u5f52\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784 \u6811\u662f\u7531n\u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u96c6\u5408\uff1a \u5982\u679cn=0\uff0c\u90a3\u8fd9\u662f\u4e00\u68f5\u7a7a\u6811\uff1b \u5982\u679cn>0\uff0c\u90a3\u5b58\u57281\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u8282\u70b9\uff0c\u5176\u4ed6\u8282\u70b9\u53ef\u4ee5\u5206\u4e3am\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811\u3002 \u4e00\u4e9b\u6982\u5ff5: \u6839\u8282\u70b9\u3001 \u53f6\u5b50\u8282\u70b9\u6811\u7684\u6df1\u5ea6\uff08\u9ad8\u5ea6\uff09 \u6811\u7684\u5ea6\u5b69\u5b50\u8282\u70b9/\u7236\u8282\u70b9 \u5b50\u6811 \u4e24\u79cd\u7279\u6b8a\u4e8c\u53c9\u6811 \u6ee1\u4e8c\u53c9:\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5982\u679c\u6bcf\u4e00\u4e2a\u5c42\u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5219\u8fd9\u4e2a\u4e8c\u53c9\u6811\u5c31\u662f\u6ee1\u4e8c\u53c9\u6811\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u53f6\u8282\u70b9\u53ea\u80fd\u51fa\u73b0\u5728\u6700\u4e0b\u5c42\u548c\u6b21\u4e0b\u5c42\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u7684\u4e8c\u53c9\u6811\u3002 \u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f: \u94fe\u5f0f\u5b58\u50a8\u65b9\u5f0f \u987a\u5e8f\u5b58\u50a8\u65b9\u5f0f(\u5217\u8868) \u7236\u8282\u70b9\u548c\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u4e0b\u6807\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f 2i+1 i:\u4ee3\u8868\u4e0b\u6807 \u7236\u8282\u70b9\u548c\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u4e0b\u6807\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f 2i+2 \u5806\u6392\u5e8f \u5806: \u5927\u6839\u5806\uff1a\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u8db3\u4efb\u4e00\u8282\u70b9\u90fd\u6bd4\u5176\u5b69\u5b50\u8282\u70b9\u5927 \u5c0f\u6839\u5806\uff1a\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u8db3\u4efb\u4e00\u8282\u70b9\u90fd\u6bd4\u5176\u5b69\u5b50\u8282\u70b9\u5c0f \u5806\u7684\u5411\u4e0b\u8c03\u6574\u6027\u8d28: \u5047\u8bbe:\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5806\uff0c\u4f46\u81ea\u8eab\u4e0d\u662f\u5806 \u5f53\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5806\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u5411\u4e0b\u7684\u8c03\u6574\u6765\u5c06\u5176\u53d8\u6362\u6210\u4e00\u4e2a\u5806 \u5806\u6392\u5e8f\u8fc7\u7a0b: \u5efa\u7acb\u5806 \u5f97\u5230\u5806\u9876\u5143\u7d20\uff0c\u4e3a\u6700\u5927\u5143\u7d20 \u53bb\u6389\u5806\u9876\uff0c\u5c06\u5806\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u653e\u5230\u5806\u9876\uff0c\u6b64\u65f6\u53ef\u901a\u8fc7\u4e00\u6b21\u8c03\u6574\u91cd\u65b0\u4f7f\u5806\u6709\u5e8f\u3002 \u5806\u9876\u5143\u7d20\u4e3a\u7b2c\u4e8c\u5927\u5143\u7d20\u3002 \u91cd\u590d\u6b65\u9aa43\uff0c\u76f4\u5230\u5806\u53d8\u7a7a\u3002 # \u5806\u6392\u5e8f\u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn) def sift(data,low,high): i = low j = 2 * i +1 tmp = data[i] while j <= high: if j < high and data[j] < data[j+1]: j += 1 if tmp < data[j]: data[i] = data[j] i = j j = 2*i+1 else: break data[i] = tmp def heap_sort(data): n = len(data) for i in range(n//2-1,-1,-1): sift(data,i,n-1) for i in range(n-1,-1,-1): data[0],data[i] = data[i],data[0] sift(data,0,i-1) \u5806\u6392\u5e8f--\u5185\u7f6e\u6a21\u5757 \u4f18\u5148\u961f\u5217\uff1a\u4e00\u4e9b\u5143\u7d20\u7684\u96c6\u5408\uff0cPOP\u64cd\u4f5c\u6bcf\u6b21\u6267\u884c\u90fd\u4f1a\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u5f39\u51fa\u6700\u5927\uff08\u6216\u6700\u5c0f\uff09\u7684\u5143\u7d20\u3002 \u5806\u2014\u2014\u4f18\u5148\u961f\u5217 Python\u5185\u7f6e\u6a21\u5757\u2014\u2014heapq heapify(x) heappush(heap, item) heappop(heap) \u5229\u7528heapq\u6a21\u5757\u5b9e\u73b0\u5806\u6392\u5e8f import heapq def heapsort(li): h = [] for value in li: heappush(h, value) return [heappop(h) for i in range(len(h))]","title":"\u5806\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_10","text":"\u5047\u8bbe\u73b0\u5728\u7684\u5217\u8868\u5206\u4e24\u6bb5\u6709\u5e8f\uff0c\u5c06\u5176\u5408\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u5217\u8868,\u8fd9\u79cd\u64cd\u4f5c\u79f0\u4e3a\u4e00\u6b21\u5f52\u5e76 # \u5f52\u5e76\u6392\u5e8f \u65f6\u95f4\u590d\u6742\u5ea6O(logn) \u7a7a\u95f4\u590d\u6742\u5ea6:O(n) def merge(li,low,mid,high): li_tmp = [] i = low j = mid + 1 while i <= mid and j <= high: if li[i] < li[j]: li_tmp.append(li[i]) i += 1 else: li_tmp.append(li[j]) j += 1 while i <= mid: li_tmp.append(li[i]) i += 1 while j <= high: li_tmp.append(li[j]) j += 1 for i in range(len(li_tmp)): li[i+low] = li_tmp[i] def merge_sort(li,low,high): if low < high: mid = (low + high) // 2 merge_sort(li,low,mid) merge_sort(li,mid+1,high) merge(li,low,mid,high) \u5f52\u5e76\u6392\u5e8f\u5b9e\u73b0\u601d\u8def: \u5206\u89e3\uff1a\u5c06\u5217\u8868\u8d8a\u5206\u8d8a\u5c0f\uff0c\u76f4\u81f3\u5206\u6210\u4e00\u4e2a\u5143\u7d20\u3002 \u7ec8\u6b62\u6761\u4ef6\uff1a\u4e00\u4e2a\u5143\u7d20\u662f\u6709\u5e8f\u7684\u3002 \u5408\u5e76\uff1a\u5c06\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\u5f52\u5e76\uff0c\u5217\u8868\u8d8a\u6765\u8d8a\u5927 \u603b\u7ed3: \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5c31\u8fd0\u884c\u65f6\u95f4\u800c\u8a00\uff1a\u5feb\u901f\u6392\u5e8f < \u5f52\u5e76\u6392\u5e8f < \u5806\u6392\u5e8f \u4e09\u79cd\u6392\u5e8f\u7b97\u6cd5\u7684\u7f3a\u70b9\uff1a \u5feb\u901f\u6392\u5e8f\uff1a\u6781\u7aef\u60c5\u51b5\u4e0b\u6392\u5e8f\u6548\u7387\u4f4e \u5f52\u5e76\u6392\u5e8f\uff1a\u9700\u8981\u989d\u5916\u7684\u5185\u5b58\u5f00\u9500 \u5806\u6392\u5e8f\uff1a\u5728\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\u4e2d\u76f8\u5bf9\u8f83\u6162","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_11","text":"\u5e0c\u5c14\u6392\u5e8f\u601d\u8def: \u5e0c\u5c14\u6392\u5e8f\u662f\u4e00\u79cd\u5206\u7ec4\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5 \u9996\u5148\u53d6\u4e00\u4e2a\u6574\u6570d1=n/2\uff0c\u5c06\u5143\u7d20\u5206\u4e3ad1\u4e2a\u7ec4\uff0c\u6bcf\u7ec4\u76f8\u90bb\u91cf\u5143\u7d20\u4e4b\u95f4\u8ddd\u79bb\u4e3ad1\uff0c\u5728\u5404\u7ec4\u5185\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u53d6\u7b2c\u4e8c\u4e2a\u6574\u6570d2=d1/2\uff0c\u91cd\u590d\u4e0a\u8ff0\u5206\u7ec4\u6392\u5e8f\u8fc7\u7a0b\uff0c\u76f4\u5230di=1\uff0c\u5373\u6240\u6709\u5143\u7d20\u5728\u540c\u4e00\u7ec4\u5185\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3002 \u5e0c\u5c14\u6392\u5e8f\u6bcf\u8d9f\u5e76\u4e0d\u4f7f\u67d0\u4e9b\u5143\u7d20\u6709\u5e8f\uff0c\u800c\u662f\u4f7f\u6574\u4f53\u6570\u636e\u8d8a\u6765\u8d8a\u63a5\u8fd1\u6709\u5e8f\uff1b\u6700\u540e\u4e00\u8d9f\u6392\u5e8f\u4f7f\u5f97\u6240\u6709\u6570\u636e\u6709\u5e8f # \u5e0c\u5c14\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba8\u8bba\u6bd4\u8f83\u590d\u6742\uff0c\u5e76\u4e14\u548c\u9009\u53d6\u7684gap\u5e8f\u5217\u6709\u5173\u3002 def shell_sort(li): gap = len(li) // 2 while gap > 0: for i in range(gap,len(li)): tmp = li[i] j = i-gap while j >= 0 and tmp < li[j]: li[j + gap] = li[j] j -= gap li[j+gap] = tmp gap //= 2","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_12","text":"\u73b0\u5728\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u5df2\u77e5\u5217\u8868\u4e2d\u7684\u6570\u8303\u56f4\u90fd\u57280\u5230100\u4e4b\u95f4\u3002\u8bbe\u8ba1\u7b97\u6cd5\u5728O(n)\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5c06\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 \u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u7528\u6765\u7edf\u8ba1\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570 def count_sort(li,max_num): count = [0 for i in range(max_num+1)] for num in li: count[num] += 1 i = 0 for num , m in enumerate(count): for j in range(m): li[i] = num i += 1 li = [1,2,3,4,5,8,6,3,2,1,4] count_sort(li,8) print(li)","title":"\u8ba1\u6570\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_13","text":"\u5728\u8ba1\u6570\u6392\u5e8f\u4e2d\uff0c\u5982\u679c\u5143\u7d20\u7684\u8303\u56f4\u6bd4\u8f83\u5927\uff08\u6bd4\u5982\u57281\u52301\u4ebf\u4e4b\u95f4\uff09\uff0c\u5982\u4f55\u6539\u9020\u7b97\u6cd5\uff1f \u6876\u6392\u5e8f(Bucket Sort)\uff1a\u9996\u5148\u5c06\u5143\u7d20\u5206\u5728\u4e0d\u540c\u7684\u6876\u4e2d\uff0c\u5728\u5bf9\u6bcf\u4e2a\u6876\u4e2d\u7684\u5143\u7d20\u6392\u5e8f\u3002 \u6876\u6392\u5e8f\u7684\u8868\u73b0\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u5206\u5e03\u3002\u4e5f\u5c31\u662f\u9700\u8981\u5bf9\u4e0d\u540c\u6570\u636e\u6392\u5e8f\u65f6\u91c7\u53d6\u4e0d\u540c\u7684\u5206\u6876\u7b56\u7565\u3002 \u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+k) \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n2k) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(nk)","title":"\u6876\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u57fa\u672c10\u5927\u7b97\u6cd5/#_14","text":"\u591a\u5173\u952e\u5b57\u6392\u5e8f\uff1a\u52a0\u5165\u73b0\u5728\u6709\u4e00\u4e2a\u5458\u5de5\u8868\uff0c\u8981\u6c42\u6309\u7167\u85aa\u8d44\u6392\u5e8f\uff0c\u5e74\u9f84\u76f8\u540c\u7684\u5458\u5de5\u6309\u7167\u5e74\u9f84\u6392\u5e8f\u3002 \u5148\u6309\u7167\u5e74\u9f84\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u6309\u7167\u85aa\u8d44\u8fdb\u884c\u7a33\u5b9a\u7684\u6392\u5e8f\u3002 \u5bf932,13,94,52,17,54,93\u6392\u5e8f\uff0c\u662f\u5426\u53ef\u4ee5\u770b\u505a\u591a\u5173\u952e\u5b57\u6392\u5e8f\uff1f # \u57fa\u6570\u6392\u5e8f # \u65f6\u95f4\u590d\u6742\u5ea6 O(kn) # \u7a7a\u95f4\u590d\u6742\u5ea6:O(k+n) # k\u8868\u793a\u6570\u5b57\u4f4d\u6570 def list_to_bucket(li, i): buckets = [[] for _ in range(10)] for val in li: digit = val // (10 ** i) % 10 buckets[digit].append(val) return buckets def bucket_to_list(buckets): li = [] for bucket in buckets: for val in bucket: li.append(val) return li def radix_sort(li): max_val = max(li) i = 0 while 10 ** i <= max_val: li = bucket_to_list(list_to_bucket(li, i)) i += 1 return li","title":"\u57fa\u6570\u6392\u5e8f"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u6570\u636e\u7ed3\u6784/","text":"\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784 \u6570\u636e\u7ed3\u6784\u662f\u6307\u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u79cd\u6216\u591a\u79cd\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u548c\u8be5\u96c6\u5408\u4e2d\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u7ec4\u6210\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u6570\u636e\u7ed3\u6784\u5c31\u662f\u8bbe\u8ba1\u6570\u636e\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7ec4\u7ec7\u5e76\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\u3002\u6bd4\u5982\uff1a\u5217\u8868\u3001\u96c6\u5408\u4e0e\u5b57\u5178\u7b49\u90fd\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 N.Wirth: \u201c\u7a0b\u5e8f=\u6570\u636e\u7ed3\u6784+\u7b97\u6cd5\u201d \u6570\u636e\u7ed3\u6784\u7684\u5206\u7c7b \u6570\u636e\u7ed3\u6784\u6309\u7167\u5176\u903b\u8f91\u7ed3\u6784\u53ef\u5206\u4e3a\u7ebf\u6027\u7ed3\u6784\u3001\u6811\u7ed3\u6784\u3001\u56fe\u7ed3\u6784 \u7ebf\u6027\u7ed3\u6784\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u76f8\u4e92\u5173\u7cfb \u6811\u7ed3\u6784\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u5b58\u5728\u4e00\u5bf9\u591a\u7684\u76f8\u4e92\u5173\u7cfb \u56fe\u7ed3\u6784\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u5b58\u5728\u591a\u5bf9\u591a\u7684\u76f8\u4e92\u5173\u7cfb \u5217\u8868 \u5217\u8868\uff1a\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u79f0\u4e3a\u201c\u6570\u7ec4\u201d\uff0c\u662f\u4e00\u79cd\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u7c7b\u578b \u5173\u4e8e\u5217\u8868\u7684\u95ee\u9898 \u5217\u8868\u4e2d\u5143\u7d20\u4f7f\u5982\u4f55\u5b58\u50a8\u7684\uff1f \u5217\u8868\u63d0\u4f9b\u4e86\u54ea\u4e9b\u57fa\u672c\u7684\u64cd\u4f5c\uff1f \u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f \u6808 \u6808(Stack)\u662f\u4e00\u4e2a\u6570\u636e\u96c6\u5408\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u53ea\u80fd\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\u7684\u5217\u8868 \u6808\u7684\u7279\u70b9\uff1a\u540e\u8fdb\u5148\u51fa\uff08last-in, first-out\uff09 \u6808\u7684\u6982\u5ff5\uff1a \u6808\u9876 \u6808\u5e95 \u6808\u7684\u57fa\u672c\u64cd\u4f5c \u8fdb\u6808\uff08\u538b\u6808\uff09\uff1apush \u51fa\u6808\uff1apop \u53d6\u6808\u9876\uff1agettop","title":"\u6570\u636e\u7ed3\u6784"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u6570\u636e\u7ed3\u6784/#_1","text":"\u6570\u636e\u7ed3\u6784\u662f\u6307\u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u79cd\u6216\u591a\u79cd\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u548c\u8be5\u96c6\u5408\u4e2d\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u7ec4\u6210\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u6570\u636e\u7ed3\u6784\u5c31\u662f\u8bbe\u8ba1\u6570\u636e\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7ec4\u7ec7\u5e76\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\u3002\u6bd4\u5982\uff1a\u5217\u8868\u3001\u96c6\u5408\u4e0e\u5b57\u5178\u7b49\u90fd\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 N.Wirth: \u201c\u7a0b\u5e8f=\u6570\u636e\u7ed3\u6784+\u7b97\u6cd5\u201d","title":"\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u6570\u636e\u7ed3\u6784/#_2","text":"\u6570\u636e\u7ed3\u6784\u6309\u7167\u5176\u903b\u8f91\u7ed3\u6784\u53ef\u5206\u4e3a\u7ebf\u6027\u7ed3\u6784\u3001\u6811\u7ed3\u6784\u3001\u56fe\u7ed3\u6784 \u7ebf\u6027\u7ed3\u6784\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u76f8\u4e92\u5173\u7cfb \u6811\u7ed3\u6784\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u5b58\u5728\u4e00\u5bf9\u591a\u7684\u76f8\u4e92\u5173\u7cfb \u56fe\u7ed3\u6784\uff1a\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u5b58\u5728\u591a\u5bf9\u591a\u7684\u76f8\u4e92\u5173\u7cfb","title":"\u6570\u636e\u7ed3\u6784\u7684\u5206\u7c7b"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u6570\u636e\u7ed3\u6784/#_3","text":"\u5217\u8868\uff1a\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u79f0\u4e3a\u201c\u6570\u7ec4\u201d\uff0c\u662f\u4e00\u79cd\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u7c7b\u578b \u5173\u4e8e\u5217\u8868\u7684\u95ee\u9898 \u5217\u8868\u4e2d\u5143\u7d20\u4f7f\u5982\u4f55\u5b58\u50a8\u7684\uff1f \u5217\u8868\u63d0\u4f9b\u4e86\u54ea\u4e9b\u57fa\u672c\u7684\u64cd\u4f5c\uff1f \u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f","title":"\u5217\u8868"},{"location":"5.\u7b97\u6cd5\u7b14\u8bb0/\u6570\u636e\u7ed3\u6784/#_4","text":"\u6808(Stack)\u662f\u4e00\u4e2a\u6570\u636e\u96c6\u5408\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u53ea\u80fd\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\u7684\u5217\u8868 \u6808\u7684\u7279\u70b9\uff1a\u540e\u8fdb\u5148\u51fa\uff08last-in, first-out\uff09 \u6808\u7684\u6982\u5ff5\uff1a \u6808\u9876 \u6808\u5e95 \u6808\u7684\u57fa\u672c\u64cd\u4f5c \u8fdb\u6808\uff08\u538b\u6808\uff09\uff1apush \u51fa\u6808\uff1apop \u53d6\u6808\u9876\uff1agettop","title":"\u6808"}]}